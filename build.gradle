import com.modrinth.minotaur.dependencies.ModDependency
import groovy.json.JsonSlurper

plugins {
    id "fabric-loom" version "1.6-SNAPSHOT"
    id "maven-publish"
    id "com.modrinth.minotaur" version "2.+"
}

repositories {
    mavenCentral()
    maven { url "https://m2.dv8tion.net/releases" }
    maven { url "https://maven.wispforest.io" }
    maven { url "https://maven.nucleoid.xyz" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://m2.chew.pro/snapshots" }
}

String CHANGELOG = new File("CHANGELOG.md").exists() ? file("CHANGELOG.md").text : "No changelog provided"
var String minecraft_version = stonecutter.current.version

var javaVer = 17;
if (isOrNewer("1.20.5")) {
    javaVer = 21
}

Map<String, List<String>> modVersions = new JsonSlurper().parse(file("modrinth.json")) as Map<String, List<String>>

archivesBaseName = project.archives_base_name
version = "$project.mod_version+$minecraft_version"
group = project.maven_group
base {
    archivesName = archivesBaseName
}

configurations.configureEach {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:$loader_version")
    }
}

static int compareVer(String ver1, String ver2) {
    return VersionNumber.parse(ver1) <=> VersionNumber.parse(ver2);
}

boolean isOrNewer(String version) {
    return compareVer(stonecutter.current.version as String, version) >= 0;
}

boolean isOrOlder(String version) {
    return compareVer(stonecutter.current.version as String, version) <= 0;
}

File file(String path) {
    return rootProject.file(path)
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$minecraft_version+build.$project.yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Mod dependencies
    include modImplementation("eu.pb4:placeholder-api:${project.placeholder_api_version}") {
        exclude module: "fabric-api"
    }
    if (isOrOlder("1.18.2")) {
        include modImplementation("fr.catcore:server-translations-api:${project.translation_api_version}") {
            exclude module: "fabric-api"
        }
    } else {
        include modImplementation("xyz.nucleoid:server-translations-api:${project.translation_api_version}") {
            exclude module: "fabric-api"
        }
    }

    // Libraries
    include api("blue.endless:jankson:${project.jankson_version}")
    api("pw.chew:jda-chewtils:${project.chewtils_version}")
    include api("net.dv8tion:JDA:${project.jda_version}") {
        exclude module: 'opus-java'
    }

    // JDA dependencies
    include "com.fasterxml.jackson.core:jackson-annotations:2.16.0"
    include "com.fasterxml.jackson.core:jackson-databind:2.16.0"
    include "com.fasterxml.jackson.core:jackson-core:2.16.0"
    include "com.neovisionaries:nv-websocket-client:2.14"
    include "org.apache.commons:commons-collections4:4.4"
    include "com.squareup.okhttp3:okhttp:4.12.0"
    include "com.squareup.okio:okio-jvm:2.13.0"
    include "net.sf.trove4j:trove4j:3.0.3"

    // Chewtils
    include "pw.chew:jda-chewtils-command:${project.chewtils_version}"
    include "pw.chew:jda-chewtils-commons:${project.chewtils_version}"

    // Runtime only
    modRuntimeOnly "net.fabricmc:fabric-language-kotlin:${project.kotlin_version}"

    // Compile only
    modCompileOnly "me.lucko:fabric-permissions-api:0.2-SNAPSHOT"
    compileOnly "net.luckperms:api:5.4"
}

loom {
    runConfigs {
        server {
            ideConfigGenerated = true
            runDir = "../../run"
        }
    }
}

if (stonecutter.current.active) {
    rootProject.tasks.register("buildActive") {
        group = "project"
        dependsOn(tasks.named("build"))
    }
}

compileJava {
    sourceCompatibility = javaVer
    targetCompatibility = javaVer
    options.encoding = 'UTF-8'
}

processResources {
    // pick the first 2 parts of the split
    def minecraft_major = minecraft_version.split("\\.", 3)[0..1].join(".")

    def map = [
            "version"          : version,
            "minecraft_major"  : minecraft_major
    ]

	inputs.properties map

	filesMatching("fabric.mod.json") {expand map }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
/*task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}*/

jar {
    from "LICENSE"
}

tasks.register('remapMavenJar', net.fabricmc.loom.task.RemapJarTask) {
    dependsOn jar
    input = jar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
    addNestedDependencies = false
}
build.dependsOn remapMavenJar

modrinth {
    String projectVersion = project.version.toString()
    List<String> projectVersionNumber = projectVersion.split("-", 2)
    String projectVersionName = "Release ${projectVersionNumber[0]}"
    if (projectVersion.contains("beta")) {
        List<String> projectBeta = projectVersionNumber[1].split("\\.", 2)
        projectVersionName = "${projectVersionNumber[0]} - Beta ${projectBeta[1]}"
        versionType = "beta"
    } else if (projectVersion.contains("alpha")) {
        List<String> projectAlpha = projectVersionNumber[1].split("\\.", 2)
        projectVersionName = "${projectVersionNumber[0]} - Alpha ${projectAlpha[1]}"
        versionType = "alpha"
    } else if (projectVersion.contains("rc")) {
        List<String> projectRC = projectVersionNumber[1].split("\\.", 2)
        projectVersionName = "${projectVersionNumber[0]} - Release Candidate ${projectRC[1]}"
        versionType = "beta"
    }

    if (modVersions[minecraft_version] == null) {
        throw "Please update modrinth.json"
    }

    token = System.getenv().MODRINTH_TOKEN
    projectId = "BMaqFQAd"
    versionName = projectVersionName
    changelog = CHANGELOG ?: ""
    uploadFile = remapJar
    gameVersions = modVersions[minecraft_version]
    syncBodyFrom = rootProject.file("README.md").text
    dependencies = [
            new ModDependency("fabric-language-kotlin", "required"),
            new ModDependency("luckperms", "optional"),
            new ModDependency("placeholder-api", "embedded")
    ]
}

//region Semver classes
/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.google.common.collect.Ordering

import javax.annotation.Nullable

public class VersionNumber implements Comparable<VersionNumber> {
    private static final DefaultScheme DEFAULT_SCHEME = new DefaultScheme();
    private static final SchemeWithPatchVersion PATCH_SCHEME = new SchemeWithPatchVersion();
    public static final VersionNumber UNKNOWN = version(0);

    private final int major;
    private final int minor;
    private final int micro;
    private final int patch;
    private final String qualifier;
    private final AbstractScheme scheme;
    private boolean deprecationLogged;

    public VersionNumber(int major, int minor, int micro, @Nullable String qualifier) {
        this(major, minor, micro, 0, qualifier, DEFAULT_SCHEME, true);
    }

    public VersionNumber(int major, int minor, int micro, int patch, @Nullable String qualifier) {
        this(major, minor, micro, patch, qualifier, PATCH_SCHEME, true);
    }

    private VersionNumber(int major, int minor, int micro, int patch, @Nullable String qualifier, AbstractScheme scheme) {
        this.major = major;
        this.minor = minor;
        this.micro = micro;
        this.patch = patch;
        this.qualifier = qualifier;
        this.scheme = scheme;
    }

    public int getMajor() {
        return major;
    }

    public int getMinor() {
        return minor;
    }

    public int getMicro() {
        return micro;
    }

    public int getPatch() {
        return patch;
    }

    @Nullable
    public String getQualifier() {
        return qualifier;
    }

    public VersionNumber getBaseVersion() {
        return new VersionNumber(major, minor, micro, patch, null, scheme, false);
    }

    @Override
    public int compareTo(VersionNumber other) {
        if (major != other.major) {
            return major - other.major;
        }
        if (minor != other.minor) {
            return minor - other.minor;
        }
        if (micro != other.micro) {
            return micro - other.micro;
        }
        if (patch != other.patch) {
            return patch - other.patch;
        }
        return Ordering.natural().nullsLast().compare(toLowerCase(qualifier), toLowerCase(other.qualifier));
    }

    @Override
    public boolean equals(@Nullable Object other) {
        return other instanceof VersionNumber && compareTo((VersionNumber) other) == 0;
    }

    @Override
    public int hashCode() {
        int result = major;
        result = 31 * result + minor;
        result = 31 * result + micro;
        result = 31 * result + patch;
        result = 31 * result + Objects.hashCode(qualifier);
        return result;
    }

    @Override
    public String toString() {
        return scheme.format(this);
    }

    public static VersionNumber version(int major) {
        return version(major, 0);
    }

    public static VersionNumber version(int major, int minor) {
        return new VersionNumber(major, minor, 0, 0, null, DEFAULT_SCHEME);
    }

    /**
     * Returns the default MAJOR.MINOR.MICRO-QUALIFIER scheme.
     */
    public static Scheme scheme() {
        return DEFAULT_SCHEME;
    }

    /**
     * Returns the MAJOR.MINOR.MICRO.PATCH-QUALIFIER scheme.
     */
    public static Scheme withPatchNumber() {
        return PATCH_SCHEME;
    }

    public static VersionNumber parse(String versionString) {
        return DEFAULT_SCHEME.parse(versionString);
    }

    @Nullable
    private String toLowerCase(@Nullable String string) {
        return string == null ? null : string.toLowerCase();
    }

    /**
     * Returns the version number scheme.
     */
    public interface Scheme {
        VersionNumber parse(String value);

        String format(VersionNumber versionNumber);
    }

    private abstract static class AbstractScheme implements Scheme {
        final int depth;

        protected AbstractScheme(int depth) {
            this.depth = depth;
        }

        @Override
        public VersionNumber parse(@Nullable String versionString) {
            if (versionString == null || versionString.length() == 0) {
                return UNKNOWN;
            }
            Scanner scanner = new Scanner(versionString);

            int major = 0;
            int minor = 0;
            int micro = 0;
            int patch = 0;

            if (!scanner.hasDigit()) {
                return UNKNOWN;
            }
            major = scanner.scanDigit();
            if (scanner.isSeparatorAndDigit('.')) {
                scanner.skipSeparator();
                minor = scanner.scanDigit();
                if (scanner.isSeparatorAndDigit('.')) {
                    scanner.skipSeparator();
                    micro = scanner.scanDigit();
                    if (depth > 3 && scanner.isSeparatorAndDigit('.', '_')) {
                        scanner.skipSeparator();
                        patch = scanner.scanDigit();
                    }
                }
            }

            if (scanner.isEnd()) {
                return new VersionNumber(major, minor, micro, patch, null, this);
            }

            if (scanner.isQualifier()) {
                scanner.skipSeparator();
                return new VersionNumber(major, minor, micro, patch, scanner.remainder(), this, false);
            }

            return UNKNOWN;
        }

        private static class Scanner {
            int pos;
            final String str;

            private Scanner(String string) {
                this.str = string;
            }

            boolean hasDigit() {
                return pos < str.length() && Character.isDigit(str.charAt(pos));
            }

            boolean isSeparatorAndDigit(char... separators) {
                return pos < str.length() - 1 && oneOf(separators) && Character.isDigit(str.charAt(pos + 1));
            }

            boolean isSeparatorAndDigit(String separators) {
                return isSeparatorAndDigit(separators.toCharArray());
            }

            private boolean oneOf(char... separators) {
                char current = str.charAt(pos);
                for (int i = 0; i < separators.length; i++) {
                    char separator = separators[i];
                    if (current == separator) {
                        return true;
                    }
                }
                return false;
            }

            boolean isQualifier() {
                return pos < str.length() - 1 && oneOf('.', '-');
            }

            int scanDigit() {
                int start = pos;
                while (hasDigit()) {
                    pos++;
                }
                return Integer.parseInt(str.substring(start, pos));
            }

            public boolean isEnd() {
                return pos == str.length();
            }

            public void skipSeparator() {
                pos++;
            }

            @Nullable
            public String remainder() {
                return pos == str.length() ? null : str.substring(pos);
            }
        }
    }

    private static class DefaultScheme extends AbstractScheme {
        private static final String VERSION_TEMPLATE = "%d.%d.%d%s";

        public DefaultScheme() {
            super(3);
        }

        @Override
        public String format(VersionNumber versionNumber) {
            return String.format(VERSION_TEMPLATE, versionNumber.major, versionNumber.minor, versionNumber.micro, versionNumber.qualifier == null ? "" : "-" + versionNumber.qualifier);
        }
    }

    private static class SchemeWithPatchVersion extends AbstractScheme {
        private static final String VERSION_TEMPLATE = "%d.%d.%d.%d%s";

        private SchemeWithPatchVersion() {
            super(4);
        }

        @Override
        public String format(VersionNumber versionNumber) {
            return String.format(VERSION_TEMPLATE, versionNumber.major, versionNumber.minor, versionNumber.micro, versionNumber.patch, versionNumber.qualifier == null ? "" : "-" + versionNumber.qualifier);
        }
    }

}
//endregion
