import com.modrinth.minotaur.dependencies.ModDependency
import groovy.json.JsonSlurper

plugins {
    id "fabric-loom" version "1.5-SNAPSHOT"
    id "maven-publish"
    id "com.modrinth.minotaur" version "2.+"
}

repositories {
    mavenCentral()
    maven { url "https://m2.dv8tion.net/releases" }
    maven { url "https://maven.wispforest.io" }
    maven { url "https://maven.nucleoid.xyz" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://m2.chew.pro/snapshots" }
}

String CHANGELOG = new File("CHANGELOG.md").exists() ? file("CHANGELOG.md").text : "No changelog provided"
String minecraft_version = stonecutter.current.version

String modVersionNumber = project.mod_version.split("\\-", 2)[0]
String modVersionType = project.mod_version.split("\\-", 2)[1] ?: ""
String modVersion = "${modVersionNumber}+${minecraft_version}${modVersionType.isEmpty() ? "" : "-$modVersionType"}"


Map<String, List<String>> modVersions = new JsonSlurper().parse(file("modrinth.json")) as Map<String, List<String>>

archivesBaseName = project.archives_base_name
version = "$modVersion"
group = project.maven_group
base {
    archivesName = archivesBaseName
}

configurations.configureEach {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:$loader_version")
    }
}

@SuppressWarnings('GrMethodMayBeStatic')
boolean mcVer(String ...versions) {
    return stonecutter.current.version in versions
}

File file(String path) {
    return rootProject.file(path)
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$minecraft_version+build.$project.yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Mod dependencies
    include modImplementation("eu.pb4:placeholder-api:${project.placeholder_api_version}") {
        exclude module: "fabric-api"
    }
    if (mcVer("1.18.2", "1.18.1", "1.18")) {
        include modImplementation("fr.catcore:server-translations-api:${project.translation_api_version}") {
            exclude module: "fabric-api"
        }
    } else {
        include modImplementation("xyz.nucleoid:server-translations-api:${project.translation_api_version}") {
            exclude module: "fabric-api"
        }
    }

    // Libraries
    include api("blue.endless:jankson:${project.jankson_version}")
    api("pw.chew:jda-chewtils:${project.chewtils_version}")
    include api("net.dv8tion:JDA:${project.jda_version}") {
        exclude module: 'opus-java'
    }

    // JDA dependencies
    include "com.fasterxml.jackson.core:jackson-annotations:2.16.0"
    include "com.fasterxml.jackson.core:jackson-databind:2.16.0"
    include "com.fasterxml.jackson.core:jackson-core:2.16.0"
    include "com.neovisionaries:nv-websocket-client:2.14"
    include "org.apache.commons:commons-collections4:4.4"
    include "com.squareup.okhttp3:okhttp:4.12.0"
    include "com.squareup.okio:okio-jvm:2.13.0"
    include "net.sf.trove4j:trove4j:3.0.3"

    // Chewtils
    include "pw.chew:jda-chewtils-command:${project.chewtils_version}"
    include "pw.chew:jda-chewtils-commons:${project.chewtils_version}"

    // Runtime only
    modRuntimeOnly "net.fabricmc:fabric-language-kotlin:${project.kotlin_version}"

    // Compile only
    modCompileOnly "me.lucko:fabric-permissions-api:0.2-SNAPSHOT"
    compileOnly "net.luckperms:api:5.4"
}

loom {
    runConfigs {
        server {
            ideConfigGenerated = true
            runDir = "../../run"
        }
    }
}

if (stonecutter.current.active) {
    rootProject.tasks.register("buildActive") {
        group = "project"
        dependsOn(tasks.named("build"))
    }
}

compileJava {
    sourceCompatibility = 17
    targetCompatibility = 17
    options.encoding = 'UTF-8'
}

processResources {
    // pick the first 2 parts of the split
    def minecraft_major = minecraft_version.split("\\.", 3)[0..1].join(".")

    def map = [
            "version"          : version,
            "minecraft_major"  : minecraft_major
    ]

	inputs.properties map

	filesMatching("fabric.mod.json") {expand map }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
/*task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}*/

jar {
    from "LICENSE"
}

tasks.register('remapMavenJar', net.fabricmc.loom.task.RemapJarTask) {
    dependsOn jar
    input = jar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
    addNestedDependencies = false
}
build.dependsOn remapMavenJar

modrinth {
    String projectVersion = project.version.toString()
    List<String> projectVersionNumber = projectVersion.split("-", 2)
    String projectVersionName = "Release ${projectVersionNumber[0]}"
    if (projectVersion.contains("beta")) {
        List<String> projectBeta = projectVersionNumber[1].split("\\.", 2)
        projectVersionName = "${projectVersionNumber[0]} - Beta ${projectBeta[1]}"
        versionType = "beta"
    } else if (projectVersion.contains("alpha")) {
        List<String> projectAlpha = projectVersionNumber[1].split("\\.", 2)
        projectVersionName = "${projectVersionNumber[0]} - Alpha ${projectAlpha[1]}"
        versionType = "alpha"
    } else if (projectVersion.contains("rc")) {
        List<String> projectRC = projectVersionNumber[1].split("\\.", 2)
        projectVersionName = "${projectVersionNumber[0]} - Release Candidate ${projectRC[1]}"
        versionType = "beta"
    }

    token = System.getenv().MODRINTH_TOKEN
    projectId = "BMaqFQAd"
    versionName = projectVersionName
    changelog = CHANGELOG ?: ""
    uploadFile = remapJar
    gameVersions = modVersions[minecraft_version]
    syncBodyFrom = rootProject.file("README.md").text
    dependencies = [
            new ModDependency("fabric-language-kotlin", "required"),
            new ModDependency("luckperms", "optional"),
            new ModDependency("placeholder-api", "embedded")
    ]
}
