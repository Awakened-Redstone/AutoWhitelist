import com.modrinth.minotaur.dependencies.ModDependency

plugins {
    id "fabric-loom" version "1.1-SNAPSHOT"
    id "maven-publish"
    id "com.modrinth.minotaur" version "2.+"
}

repositories {
    mavenCentral()
    maven { url 'https://m2.dv8tion.net/releases' }
    maven { url 'https://maven.wispforest.io' }
    maven { url 'https://maven.nucleoid.xyz' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

def CHANGELOG = new File('CHANGELOG.md').exists() ? new File('CHANGELOG.md').text : "No changelog provided"

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

configurations.configureEach {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:$loader_version")
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    api include("blue.endless:jankson:${project.jankson_version}")

    //annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
    include modImplementation("xyz.nucleoid:server-translations-api:${project.translation_api_version}")
    include modImplementation("eu.pb4:placeholder-api:${project.placeholder_api_version}")

    modRuntimeOnly "net.fabricmc:fabric-language-kotlin:${project.kotlin_version}"

    compileOnly 'net.luckperms:api:5.4'
    modCompileOnly 'me.lucko:fabric-permissions-api:0.2-SNAPSHOT'

    include api("net.dv8tion:JDA:${project.jda_version}") {
        exclude module: 'opus-java'
    }

    include 'com.fasterxml.jackson.core:jackson-annotations:2.10.1'
    include 'com.fasterxml.jackson.core:jackson-databind:2.10.1'
    include 'com.fasterxml.jackson.core:jackson-core:2.10.1'
    include 'com.neovisionaries:nv-websocket-client:2.14'
    include 'org.apache.commons:commons-collections4:4.1'
    include 'com.squareup.okhttp3:okhttp:3.13.0'
    include 'com.squareup.okio:okio:1.17.2'
    include 'net.sf.trove4j:trove4j:3.0.3'
}

tasks.withType(JavaCompile) {
    doFirst {
        println "AnnotationProcessorPath for $name is ${options.getAnnotationProcessorPath().getFiles()}"
    }
}

compileJava {
    sourceCompatibility = 17
    targetCompatibility = 17
    options.encoding = 'UTF-8'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
/*task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}*/

jar {
    from "LICENSE"
}

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
    input = jar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
    addNestedDependencies = false
}
build.dependsOn remapMavenJar

modrinth {
    String projectVersion = project.version.toString();
    List<String> projectVersionNumber = projectVersion.split("-", 2)
    String projectVersionName = "Release ${projectVersionNumber[0]}"
    if (projectVersion.contains("beta")) {
        List<String> projectBeta = projectVersionNumber[1].split("[.]", 2)
        projectVersionName = "${projectVersionNumber[0]} - Beta ${projectBeta[1]}"
        versionType = "beta"
    } else if (projectVersion.contains("alpha")) {
        List<String> projectAlpha = projectVersionNumber[1].split("[.]", 2)
        projectVersionName = "${projectVersionNumber[0]} - Alpha ${projectAlpha[1]}"
        versionType = "alpha"
    } else if (projectVersion.contains("rc")) {
        List<String> projectRC = projectVersionNumber[1].split("[.]", 2)
        projectVersionName = "${projectVersionNumber[0]} - Release Candidate ${projectRC[1]}"
        versionType = "beta"
    }

    token = System.getenv().MODRINTH_TOKEN
    projectId = "BMaqFQAd"
    versionName = projectVersionName
    changelog = CHANGELOG ?: ""
    uploadFile = remapJar
    dependencies = [
            new ModDependency("fabric-language-kotlin", "required"),
            new ModDependency("luckperms", "optional")
    ]
}